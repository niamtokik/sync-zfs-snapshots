#!/usr/bin/env python3.7
######################################################################
# sync-zfs-snapshots
######################################################################

import sys
import argparse
import os
import time
import datetime
import subprocess
import io
import re
import argparse
import logging

logLevel = 0

def uri_parser(uri):
    """ parse the source or destination uri
    >>> uri = uri_parser("ssh://myuser@myserver:1234:/my/path")
    >>> uri.group('sourcepath') == '/my/path'
    True
    >>> uri.group('user') == 'myuser'
    True
    >>> uri.group('server') == 'myserver'
    True
    >>> uri.group('port') == '1234'
    True
    """
    pattern = r'ssh://(?P<user>[^@]*)@(?P<server>[^:]*):((?P<port>[^:]*):)?(?P<sourcepath>.*)$'
    ret = re.search(pattern, uri)
    return ret

class ZFSFilesystem:
    """ need documentation.
    """
    def __init__(self, uri, sshIdentity = None):
        zfsRE = uri_parser(uri)
        if zfsRE:
            self.ssh = True
            self.sourcePath = zfsRE.group('sourcepath')
            self.user = zfsRE.group('user')
            self.server = zfsRE.group('server')
            self.port = zfsRE.group('port')
            self.sshIdentity = sshIdentity[0] if sshIdentity else None
        else:
            self.ssh = False
            self.sourcePath = uri
        logging.debug(vars(self))

    def getZPoolFilesystem (self):
        return self.sourcePath

    def getZFSCmdLine (self, args):
        cmdLine = []
        if self.ssh:
            cmdLine.append ('ssh')
            if self.port:
                cmdLine.extend (['-p', self.port])
            if self.sshIdentity:
                cmdLine.extend (['-i', self.sshIdentity])
            cmdLine.append (self.user + '@' + self.server)
        cmdLine.extend (args)
        logging.debug(cmdLine)
        return cmdLine

def zfs_get(target):
    """ generate a list containing zfs get command
    todo: doctest
    """
    volume = target.getZPoolFilesystem()
    ret = ['zfs', 'get', '-Hpd', '1', 'creation'
          , double_quoted(volume) ]
    logging.debug(str(ret))
    return ret

def exec_zfs_get(target):
    """ exec zfs_get command
    """
    command = target.getZFSCmdLine(zfs_get(target))
    logging.debug("here the command: %s", command)
    ret = subprocess.Popen(' '.join(command), stdout=subprocess.PIPE, shell=True)
    return ret

def zfs_send_incremental(source, predecessorSubvolume, sourceSubvolume):
    """ generate a list containing zfd incremental send command
    todo: doctest
    """
    predecessor = source.getZPoolFilesystem() + '@' + predecessorSubvolume
    volume = source.getZPoolFilesystem() + '@' + sourceSubvolume
    ret = [ "'"
          , 'zfs', 'send', '-i'
          , double_quoted(predecessor)
          , double_quoted(volume)
          , "'"]
    logging.debug(str(ret))
    return ret

def single_quoted(str):
    """ add single quotes "'" around a string
    >>> single_quoted("test")
    "'test'"
    """
    return "'" + str + "'"

def double_quoted(str):
    """ add double quotes '"' around a string
    >>> double_quoted("test")
    '"test"'
    """
    return '"' + str + '"'

def zfs_send(source, sourceSubvolume):
    """ generate a list containing zfs send command
    todo: doctest
    """
    volume = source.getZPoolFilesystem() + '@' + sourceSubvolume
    ret = [ "'" , 'zfs', 'send', double_quoted(volume) , "'" ]
    logging.debug(str(ret))
    return ret

def zfs_recv(target):
    """ generate a list containing zfs receive command
    todo: doctest
    """
    volume = target.getZPoolFilesystem()
    ret = ['zfs', 'receive', '-Fv' , double_quoted(volume) ]
    logging.debug(str(ret))
    return ret

def search_snapshot_creation(line):
    """ search for creation date pattern
    """
    pattern = r'.*@(.*)\tcreation\t([0-9]*)\t.*$'
    ret = re.search(pattern, line)
    return ret

def readSubvolumesByCreation(zfsProc):
    """ todo
    """
    subvolumesByCreation = {}
    for line in zfsProc.stdout.readlines():
        theLine = line.decode().strip ()
        lineRE = search_snapshot_creation(theLine)
        if lineRE:
            snapPath = lineRE.group(1)
            snapCreation = lineRE.group(2)
            subvolumesByCreation[snapCreation] = snapPath
            logging.warning("found %s", snapPath)
        else:
            logging.warning("bad line: %s", theLine)
    return subvolumesByCreation

def invertMap(map):
    """ todo
    """
    result={}
    for key in sorted (map):
        result[map[key]] = key
    return result

def execute_command(command):
    """ execute a command by joining list with space (" ")
    """
    logging.debug("execute: %s", str(command))
    subprocess.call(' '.join(command), shell=True)

def main(argv):
    """
    """
    parser = argparse.ArgumentParser(description='Synchronise all snapshots in a ZFS filesystem to another zfs filesystem.  Useful for synchronising backups.')
    parser.add_argument ("--debug", dest='debug', nargs='?', const=1, type=int, help='Debug level of the application.  Uses debug 1 if flag is passed without a number.')
    parser.add_argument ("--sshIdentity", dest='sshIdentity', nargs=1, help='ssh identity key file to use when ssh-ing to destination servers')
    parser.add_argument ("source", help='Source ZFS filesystem.  Local filsystems are specified as zpool/filesystem.  Remote ones are specified as ssh://user@server[:port]:zpool/filesystem.')
    parser.add_argument ("destination", help='Destination ZFS filesystem.  Same format as source.')

    args = parser.parse_args()
    logging.debug("arguments: %s", str(args))

    source = ZFSFilesystem(args.source, sshIdentity=args.sshIdentity)
    logging.debug("create dataset source object")
    
    destination = ZFSFilesystem(args.destination, sshIdentity = args.sshIdentity)
    logging.debug("create dataset destination object")
    
    sourceZfsProc = exec_zfs_get(source)
    sourceSubvolumesByCreation = readSubvolumesByCreation(sourceZfsProc)
    sourceCreationBySubvolumes = invertMap(sourceSubvolumesByCreation)
    sourceCreatedSorted = sorted(sourceSubvolumesByCreation)

    destinationZfsProc = exec_zfs_get(destination)
    destinationSubvolumesByCreation = readSubvolumesByCreation(destinationZfsProc)
    destinationCreationBySubvolumes = invertMap(destinationSubvolumesByCreation)

    for volIndex, volKey in enumerate(sourceCreatedSorted):
        sourceSubvolume = sourceSubvolumesByCreation[volKey]

        if sourceSubvolume in destinationCreationBySubvolumes:
            logging.warning("snapshot already present: %s", sourceSubvolume) 
        else:
            if volIndex > 0:
                predecessorSubvolumeKey = sourceCreatedSorted[volIndex - 1]
                predecessorSubvolume = sourceSubvolumesByCreation[predecessorSubvolumeKey]
                logging.warning("Missing subvolume %s and predecessor %s", sourceSubvolume, predecessorSubvolume)
                sendCmd = source.getZFSCmdLine(zfs_send_incremental(source, predecessorSubvolume, sourceSubvolume))
            else:
                logging.warning("Missing initial subvolume %s", sourceSubvolume)
                sendCmd = source.getZFSCmdLine(zfs_send(source, sourceSubvolume))

            receiveCmd = destination.getZFSCmdLine(zfs_recv(destination))
            fullCmdLine = sendCmd + [ "|" , "dd" , "|" ] + receiveCmd
            result = execute_command(fullCmdLine)

            if result:
                logging.error("error running '%s'", fullCmdLine)
                sys.exit(1)
    
if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    main(sys.argv[1:])
    sys.exit(0)
